Minimum Requirements:
=====================
- 16GB of RAM (8GB will be allocated for Docker) smaller configurations are possible (even 8GB total and 4GB for docker), but will be very slow.
- Win10 pro x64

1. Follow the instruction on "Local Version setup.txt" first. All the software and configurations there are required for development.

2. You should already have TransitAnalystIsrael and navitia-docker-compose git repositories. Using Git-bash, git clone the git reprsitory of Navitia Frontend timemap. This is the project for developing the time map frontend: https://github.com/transitanalystisrael/Navitia-Timemap-Frontend.git

3. Install SourceTree (https://www.sourcetreeapp.com/) and add the git folders of the three projects to SourceTree so you can develop. Each project's main branch is "master" - check it out first then branch out a new branch for development.

4.1 TranitAnalystIsrael Development
===================================
TranitAnalystIsrael is comprised of python code for data processing and HTML/JS code for frontend client.

Recommended IDEs are PyCharm (https://www.jetbrains.com/pycharm/) and (https://www.jetbrains.com/webstorm/).

TranitAnalystIsrael python entry points are in the root folder:
- transitanalystisrael_v1.py 
- transitanalystisrael_config.py 
See TransitAnalystIsrael flows presentation for system architecture and flows.

If you make any changes that are pushed to TransitAnalystIsrael/master brach, update the code on the AWS EC2 instance:
1. Using putty connect to the EC2 instance.
2. Go to TranitAnalystIsrael directory:
$ cd TranitAnalystIsrael
3. Update the code to the latest version:
$ git pull


The web tools code is found under website_no_data, where each tool has its own index.html with shared css page in css file. JS code is in each index.html file, shared (dist folder) and some is generated by the Python code.

The only exception is the Time map code.

4.2 TimeMap Development
=======================
The time map data is served by Navitia Dockers (see 4.3). The client is HTML + JS developed with webpack framework.
1. Download and install Node.js (https://nodejs.org/en/download/)
2. Bring up Navitia Docker server:
	a. Go to the folder where you cloned the Navitia-docker-compose repo e.g. C:\git\navitia-docker-compose
	b. Right-click and select run "Git Bash Here" to open a terminal window.
	c. type at the prompt "docker-compose -f compose_files/docker-compose-secondary-cov.yml -p navitia-docker-compose up --remove-orphans" 
3. Copy the docs folder from C:\Dev\TransitAnalystIsrael\website_current to C:\Dev\Navitia-timemap-Frontend - the docs folder is needed for the configuration files that dictate which URL to go to etc.
3. Go to the Navitia-timemap-Frontend root folder.
4. Open Git Bash -> Type npm install (only needed first time) then Type: npm run dev
   This will bring up a development server that its index.html file will be served at http://localhost:8080
5. The main file for edit is "index.ejs" which is like the index.html.
   The main JS file is app/timeMap.js
   The main CSS file is assets/styles/_custom.scss
6. As long as "npm run dev" is running, each change you make will trigger a refresh on localhost:8080 right away.
7. When you're done editing the code, you need to build it so you can copy the output files back to TranitAnalystIsrael:
7a. Go to the Git bash -> press ctrl+c -> Type: npm run build
7b. Once done, a "dist" folder is created under Navitia-timemap-Frontend.
7c. Copy all the folders and files except the ones that end with .map (those help development and are not required for prodction):
	- assets
	- node_modules
	- bundle.dc819f7b4b10f0abddcf.js (the code changes every time)
	- index.html
	- vendor.a91f00ab8da7685898bc.js (the code changes every time)
7d. Paste these files under C:\Dev\TransitAnalystIsrael\website_no_data. When you paste them, keep in mind that the bundle.XXXXXXX.js always changes, so remove the old one.
7e. If you don't want to re-run TransitAnalystIsrael procesess all over again, assuming you only made changes to the Navitia-time-map frontend, you can paste the files and folders directly in C:\Dev\TransitAnalystIsrael\website_current
7f. You can also upload to S3 using the AWS S3 console. Remember to gzip the js file/s bigger than the min size (as defined in the transitanalystisrael_config.py file - e.g. 500KB). 
    To gzip from cmd term in dir of file do 'gzip -9 -k -f <filename>' - e.g. 'C:\git\TransitAnalystIsrael\website_current\transit_time_map>gzip -9 -k -f bundle.d6828eb0c09db3d9bdd7.js' 
    And after upload, change the gziped file/s as follows: rename to remove '.gz' from end and change the metadata to the correct values (ContentEncoding='gzip', ContentType='text/javascript').

4.3 Navitia-Docker-Compose development
======================================
During the development of TransitAnalystIsrael v1.0 we haven't made any changes to the source code of Navitia-docker-compose. The only changes performed are for the docker-compose files for bringing up custom coverages (secondary-cov, on-demand, etc.). 
The .yml files are under C:\Dev\navitia-docker-compose\custom_files

4.4 Update Navitia to a newer version
======================================
If you want to rebase our navitia-docker-compose with the original repo then follow the instructions in - https://stackoverflow.com/questions/7244321/how-do-i-update-a-github-forked-repository

Following that, you need uo update the code on any EC2 machine that run navitia-docker-compose:
1. Using putty connect to the EC2 instance.
2. Go to navitia-docker-compose directory:
$ cd navitia-docker-compose
3. Update the code to the latest version:
$ git pull
4. Go to the "Instruction for On Demand date on AWS.txt" or "Instructions for Monthly auto update on AWS.txt" and perform instrucitons to stop and restart navitia docker server on your AWS EC2 machine.

